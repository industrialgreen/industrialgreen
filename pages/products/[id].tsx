import { KeyboardEvent } from "react";
import Link from "next/link";
import Head from "next/head";
import { GetStaticPaths, GetStaticProps } from "next";

import { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import useTranslation from "next-translate/useTranslation";
import PageWrapper from "@/components/PageWrapper";
import { IProduct, products } from ".";
import { BsChevronLeft } from "react-icons/bs";
import { BsChevronRight } from "react-icons/bs";
import { BsXLg } from "react-icons/bs";

type IProps = {
  product: IProduct;
};

const ProductPage = ({ product }: IProps) => {
  const { t } = useTranslation("common");
  const [imageIndex, setImageIndex] = useState(0);
  const [imgSrc, setImgSrc] = useState(product.imgList[0]);
  const [modalOpen, setModalOpen] = useState(false);

  const colors = [
    { ral: "9005", hex: "#0A0A0A" },
    { ral: "9004", hex: "#282828" },
    { ral: "9011", hex: "#1C1C1C" },
    { ral: "9016", hex: "#F6F6F6" },
    { ral: "9003", hex: "#F4F4F4" },
    { ral: "9010", hex: "#FFF" },
    { ral: "7016", hex: "#293133" },
    { ral: "8017", hex: "#45322E" },
    { ral: "8019", hex: "#403A3A" },
    { ral: "3020", hex: "#CC0605" },
    { ral: "1021", hex: "#F3DA0B" },
    { ral: "1023", hex: "#FAD201" },
    { ral: "9006", hex: "#A5A5A5" },
    { ral: "9007", hex: "#8F8F8F" },
    { ral: "1036", hex: "#705335" },
    { ral: "1035", hex: "#6A5D4D" },
  ];

  const handleNextImage = () => {
    if (imageIndex === undefined) return;
    if (imageIndex === product.imgList.length - 1) {
      setImageIndex(0);
      setImgSrc(product.imgList[0]);
    } else {
      setImageIndex(imageIndex + 1);
      setImgSrc(product.imgList[imageIndex + 1]);
    }
  };

  const handlePrevImage = () => {
    if (imageIndex === undefined) return;
    if (imageIndex === 0) {
      setImageIndex(product.imgList.length - 1);
      setImgSrc(product.imgList[product.imgList.length - 1]);
    } else {
      setImageIndex(imageIndex - 1);
      setImgSrc(product.imgList[imageIndex - 1]);
    }
  };

  const handleKeyPress = (e: KeyboardEvent<HTMLDivElement>) => {
    if (e.code === "ArrowRight") {
      handleNextImage();
    }
    if (e.code === "ArrowLeft") {
      handlePrevImage();
    }
    if (e.code === "Escape") {
      setModalOpen(false);
    } else return;
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageWrapper>
        <div className="product-wrapper">
          <div className="product-description">
            <h4 className="underline">{product.title}</h4>
            <p>{product.description}</p>
            <p>
              <b>Materiał: </b>
              {product.material}
            </p>
            <p>
              <b>Dostępne kolory RAL:</b>
            </p>
            <div className="colors">
              {colors.map((color) => (
                <div className="colors-container" key={color.ral}>
                  <div
                    className="colors-ral"
                    style={{ background: color.hex }}
                  ></div>
                  <p>{color.ral}</p>
                </div>
              ))}
            </div>
            <p>
              <b>Przykładowe wymiary kwietnika: </b>
              {product.totalDimensions}
            </p>
            <p>
              <b>Przykładowe wymiary doniczek: </b>
              {product.potterDimensions}
            </p>
            <p>
              <b>W komplecie wkład wewnętrzny: </b>
              {product.inside}
            </p>
            <p>
              <b>Termin realizacji:</b>
              {product.orderTime}
            </p>
            <div className="contact">
              <Link href="/products">
                <button className="button button-text">
                  {t("contactButton")}
                </button>
              </Link>
            </div>
          </div>
          <div>
            <div className="main-img-container">
              <button className="arrow-button left" onClick={handlePrevImage}>
                <BsChevronLeft />
              </button>
              <img src={imgSrc} alt="" onClick={() => setModalOpen(true)} />
              <button className="arrow-button right" onClick={handleNextImage}>
                <BsChevronRight />
              </button>
            </div>
            <div className="mini-img-container">
              {product?.imgList.map((image) => (
                <button
                  key={image}
                  onClick={() => setImgSrc(image)}
                  style={{
                    borderBottomColor: image === imgSrc ? "#179736" : "#fff",
                  }}
                >
                  <img src={image} />
                </button>
              ))}
            </div>
          </div>
        </div>
        <AnimatePresence>
          {modalOpen && (
            <motion.div
              className="modal"
              onKeyDown={handleKeyPress}
              initial={{ opacity: 0, y: 0 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              <button
                className="arrow-button close"
                onClick={() => setModalOpen(false)}
              >
                <BsXLg />
              </button>
              <div className="">
                <button className="arrow-button left" onClick={handlePrevImage}>
                  <BsChevronLeft />
                </button>
                <img src={imgSrc} alt="" onClick={() => setModalOpen(true)} />
                <button
                  className="arrow-button right"
                  onClick={handleNextImage}
                >
                  <BsChevronRight />
                </button>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </PageWrapper>
    </>
  );
};

export default ProductPage;

export const getStaticPaths: GetStaticPaths = async ({ locales }) => {
  const data = products;

  const productsIds = data.map((product) => product.id);
  const paths = productsIds
    .map((id) =>
      locales!!.map((locale) => ({
        params: { id },
        locale,
      }))
    )
    .flat();

  return {
    paths,
    fallback: false,
  };
};

export const getStaticProps: GetStaticProps = async (context: any) => {
  const id = context.params.id;
  const data = products.filter((item) => item.id === id)[0];

  return {
    props: { product: data },
  };
};
